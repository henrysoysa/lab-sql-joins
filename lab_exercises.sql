/*

Write SQL queries to perform the following tasks using the Sakila database:

List the number of films per category.
Retrieve the store ID, city, and country for each store.
Calculate the total revenue generated by each store in dollars.
Determine the average running time of films for each category.
Bonus:

Identify the film categories with the longest average running time.
Display the top 10 most frequently rented movies in descending order.
Determine if "Academy Dinosaur" can be rented from Store 1.
Provide a list of all distinct film titles, along with their availability status in the inventory. 
Include a column indicating whether each title is 'Available' or 'NOT available.' 
Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

*/

use sakila;

-- List the number of films per category.

SELECT COUNT(f.film_id) as num_films, c.name as category
FROM sakila.film f
JOIN sakila.film_category fc
ON f.film_id = fc.film_id
JOIN sakila.category c
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY num_films DESC;

-- Retrieve the store ID, city, and country for each store.

SELECT s.store_id as store_id, c.city as city, co.country as country
FROM sakila.store s
JOIN sakila.address a
ON s.address_id = a.address_id
JOIN sakila.city c
ON a.city_id = c.city_id
JOIN sakila.country co
ON c.country_id = co.country_id;

-- Calculate the total revenue generated by each store in dollars.

SELECT SUM(p.amount) as total_revenue_usd, s.store_id as store_id
FROM sakila.payment p
JOIN sakila.staff s
ON p.staff_id = s.staff_id
GROUP BY s.store_id;

-- Determine the average running time of films for each category.

SELECT AVG(f.length) as avg_film_duration, c.name as category
FROM sakila.film f
JOIN sakila.film_category fc
ON f.film_id = fc.film_id
JOIN sakila.category c
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY avg_film_duration DESC;

-- Identify the film categories with the longest average running time.
SELECT AVG(f.length) as avg_film_duration, c.name as category,
rank() OVER (ORDER BY AVG(f.length) DESC) as ranking
FROM sakila.film f
JOIN sakila.film_category fc
ON f.film_id = fc.film_id
JOIN sakila.category c
ON fc.category_id = c.category_id
GROUP BY c.name;

-- Display the top 10 most frequently rented movies in descending order.
SELECT COUNT(r.rental_id) as num_rentals, f.title as film_title
FROM sakila.rental r
JOIN sakila.inventory i
ON r.inventory_id = i.inventory_id
JOIN sakila.film f
ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY num_rentals DESC
LIMIT 10;


-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT *
FROM sakila.inventory i
JOIN sakila.film f 
ON i.film_id = f.film_id
WHERE i.store_id = 1 AND f.title = 'Academy Dinosaur';
-- Query returns 4 records of academy dinosaur.


-- Provide a list of all distinct film titles, along with their availability status in the inventory. 

SELECT DISTINCT(f.title) as movie_title, COUNT(i.inventory_id) as available_rental_copies,
CASE
WHEN COUNT(inventory_id) > 1 THEN 'AVAILABLE'
WHEN COUNT(inventory_id) < 1 THEN 'NOT AVAILABLE'
END AS Availability_status
FROM sakila.film f
LEFT JOIN sakila.inventory i
ON f.film_id = i.film_id
GROUP BY (f.title)
ORDER BY available_rental_copies ASC
;
